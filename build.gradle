plugins {
    id 'java'
    id 'jacoco'

    // https://plugins.gradle.org/plugin/org.openjfx.javafxplugin
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'de.uniks'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'fr.brouillard.oss:cssfx:11.5.1'
    implementation 'com.google.code.gson:gson:2.10.1'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.2'

    // https://mvnrepository.com/artifact/org.testfx/testfx-junit5
    testImplementation group: 'org.testfx', name: 'testfx-junit5', version: '4.0.16-alpha'

    // https://mvnrepository.com/artifact/org.testfx/openjfx-monocle
    testImplementation group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-12.0.1+2'

    // -------------------- Mockito (for Mocking) ----------------------------------

    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.3.1'

    // -------------------- Dagger (Dependency Injection) --------------------

    implementation 'com.google.dagger:dagger:2.45'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.45'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.45'

    // -------------------- Retrofit --------------------

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-jackson
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '2.9.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.14.2'

    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation group: 'io.reactivex.rxjava3', name: 'rxjava', version: '3.1.6'

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/adapter-rxjava3
    implementation group: 'com.squareup.retrofit2', name: 'adapter-rxjava3', version: '2.9.0'

    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    // -------------------- WebSocket --------------------
    compileOnly group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1'
    compileOnly group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
    implementation group: 'org.glassfish.tyrus', name: 'tyrus-client', version: '1.20'
    implementation group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client', version: '1.20'

    // -------------------- ControlFX --------------------
    // https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.0'

}

javafx {
    version = '20'
    modules = ['javafx.controls', 'javafx.graphics', 'javafx.fxml']
}

jacoco {
    toolVersion = '0.8.9'
}

jacocoTestReport {
	reports.xml.required = true
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
    }

    if (getProperty('headless') == "true" || System.getenv('CI')) {
		systemProperties = [
				'java.awt.headless': 'true',
				'testfx.robot': 'glass',
				'testfx.headless': 'true',
				'glass.platform': 'Monocle',
				'monocle.platform': 'Headless',
				'prism.order': 'sw',
				'prism.text': 't2k',
		]
	}
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': "de.uniks.stpmon.team_m.Main"
    }
    archiveBaseName = "${rootProject.name}"
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
